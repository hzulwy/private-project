/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package compareuploadprograms;

import static compareuploadprograms.DownloadFile.ParseXml;
import static compareuploadprograms.SetJPanel.set;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyledDocument;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author dell
 */
public class TestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TestJPanel
     */
    public TestJPanel() {
        initComponents();
    }
     public TestJPanel(String path) throws Exception {
         initComponents2(path);
       // initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
     
     private void initComponents2(String path) throws Exception{
         
         ReadXmlFile readXmlFile=new ReadXmlFile(path);
         List list_id=readXmlFile.XmlToList_key(path);
         List list_casename=readXmlFile.XmlToList_casename(path);
         DefaultTableModel tableModel = null;
         
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelBarCode = new javax.swing.JLabel();
        jTextFieldBarCode = new javax.swing.JTextField();
        jLabelIsCheck = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JTextPane();
        jLabelUpload = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 470));

        tableModel=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row,int column){
                    if(column==0)
                        return true;
                    else
                        return false; 
            }
            
        };
        tableModel.setColumnIdentifiers(new String[]{"选择", "关键字名称", "关键字值"});

        int list_size=list_id.size();
        
        tableModel.getDataVector().clear();
        String item=set.getNum().toString();
        String[] items = item.split(",");
       //  System.out.println(items.toString()+"00000000000");
        int flag=0;
       for(int i=0;i<list_size;i++){  
               String id=null;
               String name=null;
              id=(String) list_id.get(i);
              name=(String)list_casename.get(i);
          for(int q=1;q<items.length;q++){ 
              if(items[q].equals(name)){
                  tableModel.addRow(new Object[]{new Boolean(true),id,name});
                  flag=1;
                  break;
              }
              if(flag==0){
                 tableModel.addRow(new Object[]{new Boolean(false),id,name});
              }
              flag=0;
           }
            
         } 
        
        jTable1=new JTable(tableModel){
              Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        
        };
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabelBarCode.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jLabelBarCode.setText("条形码：");

        jTextFieldBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBarCodeActionPerformed(evt);
            }
        });
        jTextFieldBarCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldBarCodeKeyPressed(evt);
            }
        });

        jScrollPane3.setViewportView(jLabel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelBarCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelIsCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelBarCode)
                    .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIsCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
     }
     
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelBarCode = new javax.swing.JLabel();
        jTextFieldBarCode = new javax.swing.JTextField();
        jLabelIsCheck = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelUpload = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(700, 470));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(false), null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "选择", "关键字名称", "关键字值"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabelBarCode.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        jLabelBarCode.setText("条形码：");

        jTextFieldBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBarCodeActionPerformed(evt);
            }
        });
        jTextFieldBarCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldBarCodeKeyPressed(evt);
            }
        });

        jScrollPane3.setViewportView(jLabel1);

        jScrollPane2.setViewportView(jLabelUpload);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelBarCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelIsCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap(415, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelIsCheck, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelBarCode)
                        .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldBarCodeActionPerformed

    private void jTextFieldBarCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
          if(!set.getID().equals("")){
            server=set.getServerIP().toString();
            String actionUrl="http://"+server+"/MES.WIP.Webservice/FTService.asmx/GetComponent?sBarcodeNo=";
            String code=jTextFieldBarCode.getText().trim();
            actionUrl=actionUrl+code;
            System.out.println(actionUrl);
            String path=set.getLog_path().toString();
            System.out.println(path);
            saveUrlAs(actionUrl, path+"\\", "GET");
            ParseXml2(path+"\\config.txt");
            bar=jTextFieldBarCode.getText().trim();
            if(ParseXml(path+"\\log.xml")){

                jLabelIsCheck.setText(bar+" Comparation is OK!");
                jLabelIsCheck.setForeground(Color.green);
                jLabelIsCheck.setFont(new Font("",1,18));
                jTextFieldBarCode.setText("");
                GenerateXml(code);
                msFile.delete();
                try {
                    UploadXml(set.getToMES_path()+"\\XML.txt");
                } catch (IOException ex) {
                    Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                
                jLabelIsCheck.setText(bar+" Comparation is ERROR!");
                jLabelIsCheck.setForeground(Color.red);
                jLabelIsCheck.setFont(new Font("",1,18));
                jTextFieldBarCode.setText("");
                GenerateXml(code);
            }
          }else{
                jLabelIsCheck.setText("请填写ID号！！！");
                jLabelIsCheck.setForeground(Color.red);
                jLabelIsCheck.setFont(new Font("",1,18));
                jTextFieldBarCode.setText("");
          }
            
        }      
    }//GEN-LAST:event_jTextFieldBarCodeKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane jLabel1;
    private javax.swing.JLabel jLabelBarCode;
    private javax.swing.JLabel jLabelIsCheck;
    private javax.swing.JLabel jLabelUpload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldBarCode;
    // End of variables declaration//GEN-END:variables

    String[] substr=null;
    String[] netstr=new String[30];
    String msFileName=null;
    String bar=null;
    File msFile=null;
    String[]err=new String[2];
    String item=null;
    String[]items=null;
    NodeList nL=null;
    String server=null;
    
    public boolean ParseXml(String path){
        boolean ischeck=true;
        String s="";
        String shtml="";
        try{
            File file=new File(path);
            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
            DocumentBuilder builder=factory.newDocumentBuilder();
            Document doc=builder.parse(file);
            String str=doc.getDocumentElement().getFirstChild().getNodeValue();
            
            if(str.equals("[]")){
                //System.out.println("False");
                ischeck=false;
                jLabel1.setText("");
                AddNullForTable();
            }else{
                String substring=str.substring(2, str.length()-2);
                String[] logsubstring = substring.split(",");
                for(int i=0;i<logsubstring.length;i++){
                String[] extendlogsubstring = logsubstring[i].split(":");
                    for(int j=0;j<substr.length;j++){
                     if(extendlogsubstring[0].equals("\""+substr[j]+"\"")){
                        if(("\""+netstr[j]+"\"").equals(extendlogsubstring[1])){
                          //  System.out.println("++++++++++++"+("\""+netstr[j]+"\"").equals(extendlogsubstring[1]));
                           s="Server-- "+substr[j]+" : "+extendlogsubstring[1]+"<br/>";
                           s+="XML-- "+substr[j]+" : "+"\""+netstr[j]+"\"";
                           shtml+="<h3 style='color:green'>"+s+"</h3>";
                         if(!ischeck)
                            ;
                         else
                             ischeck=true;
                        }else{
                           //   System.out.println("------------"+("\""+netstr[j]+"\"").equals(extendlogsubstring[1]));
                             s="Server-- "+substr[j]+" : "+extendlogsubstring[1]+"<br/>";
                             s+="XML-- "+substr[j]+" : "+"\""+netstr[j]+"\"";
                             shtml+="<h3 style='color:red'>"+s+"</h3>";    
                            ischeck=false;
                        }
                           jLabel1.setContentType("text/html");
                           jLabel1.setFont(new Font("",1,16));
                           jLabel1.setText(shtml);
                           StyledDocument styledDoc = jLabel1.getStyledDocument();
                            System.out.println(styledDoc.getLength()); 
                            System.out.println(jLabel1.getText());
                     }
                  }
                  //  System.out.println(extendlogsubstring[k]); 
            }
                  //  System.out.println(substring);    
                AddDataForTable(set.getToMES_path()+"\\"+msFileName);
          }
                  //System.out.println(str.substring(2, str.length()-2));
        }catch(Exception e){
           e.printStackTrace();
        }
        return ischeck;
    }
    
     public boolean ParseXml2(String path){
        boolean ischeck=false;
        String str = null;
        
        try{
            File file=new File(set.getToMES_path().toString());
            File[] files = file.listFiles();
            
            File f=new File(path);
            FileInputStream fis=new FileInputStream(f);
           // BufferedReader bfr=new BufferedReader();
            byte[]bs=new byte[1024];
            int count=0;
            while((count=fis.read(bs))>0){
                str=new String(bs,0,count);
                //System.out.println(str);
            }
            if(str==null){
                return false;
            }else{
               substr = str.split(",");
               for(int j=0;j<substr.length;j++){
                  for(int i=0;i<files.length;i++){
                    if(files[i].getName().startsWith("ms")){
                       if(files[i].getName().endsWith(".xml")){
                           msFile=files[i];
                           msFileName=files[i].getName();
                           DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
                           DocumentBuilder builder=factory.newDocumentBuilder();
                           Document doc=builder.parse(files[i]);
                            nL = doc.getDocumentElement().getElementsByTagName("TestItem");
                           for(int k=0;k<nL.getLength();k++){
                              if(nL.item(k).getAttributes().item(0).getNodeValue().equals(substr[j])){
                                  //System.out.println(nL.item(k).getTextContent());
                                  System.out.println(nL.item(k).getAttributes().item(0).getNodeValue()+"===========");
                                  netstr[j]=nL.item(k).getTextContent();
                                  System.out.println("======="+netstr[j]);
                              } 
                           }
//                           System.out.println("========="+nL.item(0).getTextContent()+"=========="+nL.item(0).getAttributes().item(0).getNodeName());
                           NodeList nLEc = doc.getDocumentElement().getElementsByTagName("Errcode");
                           if(nLEc.item(0).getTextContent()!=null)
                              err[0]=nLEc.item(0).getTextContent();
                           else
                               err[0]="";
                           System.out.println(nLEc.item(0).getTextContent()+"====---===");
                           NodeList nLEp = doc.getDocumentElement().getElementsByTagName("ErrPinDesc");
                           if(nLEp.item(0).getTextContent()!=null)
                              err[1]=nLEp.item(0).getTextContent();
                           else
                               err[1]="";
//                           for(int x=0;x<nLNg.getLength();x++){
//                               if(nLNg.item(x).getNodeName().toUpperCase()=="Errcode"){
//                                   if(nLNg.item(x).getNodeValue()!=null){
//                                        System.out.println(nLNg.item(x).getNodeValue());
//                                        err[0]=nLNg.item(x).getNodeValue();
//                                    }else{
//                                        System.out.println(nLNg.item(x).getNodeName());
//                                    }
//                               }
//                                if(nLNg.item(x).getNodeName().toUpperCase()=="ERRPINDESC"){
//                                   if(nLNg.item(x).getNodeValue()!=null){
//                                        System.out.println(nLNg.item(x).getNodeValue());
//                                        err[1]=nLNg.item(x).getNodeValue();
//                                    }else{
//                                        System.out.println(nLNg.item(x).getNodeName());
//                                    }
//                                }
//                           }
                        }
                    }
                    break;
                    }
               }
            }
            //System.out.println(str.substring(2, str.length()-2));
        }catch(Exception e){
           e.printStackTrace();
        }
        return ischeck;
    }
    
    private void saveUrlAs(String url, String filePath, String method) {
         File file=new File(filePath);
        if(!file.exists()){
            file.mkdirs();
        }
        FileOutputStream fileOut=null;
        HttpURLConnection conn=null;
        InputStream inputStream=null;
        
        try {
            URL httpUrl=new URL(url);
            conn= (HttpURLConnection) httpUrl.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(method);
            
            conn.connect();
            inputStream=conn.getInputStream();
            BufferedInputStream bis=new BufferedInputStream(inputStream);
            
            if(filePath.endsWith("\\")){
               filePath+="\\";
            }
            fileOut=new FileOutputStream(filePath+"log.xml");
            BufferedOutputStream bos=new BufferedOutputStream(fileOut);
            
            byte[]buf=new byte[4096];
            int length=bis.read(buf);
            
            while(length!=-1){
                bos.write(buf,0,length);
                length=bis.read(buf);
            }
            bos.close();
            bis.close();
            conn.disconnect();
        } catch (MalformedURLException ex) {
            Logger.getLogger(DownloadFile.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(DownloadFile.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DownloadFile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void GenerateXml(String str) {
        
        FileOutputStream fileOut=null;
        BufferedOutputStream bos=null;
        SimpleDateFormat sDateFormat=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String date=sDateFormat.format(new Date());
        char c = 0;
        for(int i=0;i<msFileName.length();i++){
          if(msFileName.charAt(i)=='F'||msFileName.charAt(i)=='P'){
             c=msFileName.charAt(i);
             break;
          }
        }
        
        if(msFileName!=null){
            try {
                fileOut=new FileOutputStream(set.getToMES_path()+"\\XML.txt");
                bos=new BufferedOutputStream(fileOut);
                bos.write("<root>".getBytes());
                bos.write("<TestStation>".getBytes());
                bos.write(set.getPath().getBytes());
                bos.write("</TestStation>".getBytes());
                bos.write("<TestMachine>".getBytes());
                bos.write(set.getLine().getBytes());
                bos.write("</TestMachine>".getBytes());
                bos.write("<Tester>".getBytes());
                bos.write(set.getID().getBytes());
                bos.write("</Tester>".getBytes());
                bos.write("<BarcodeNo>".getBytes());
                bos.write(str.getBytes());
                bos.write("</BarcodeNo>".getBytes());
                bos.write("<TestStatus>".getBytes());
                bos.write(c);
                bos.write("</TestStatus>".getBytes());
                bos.write("<Customer>".getBytes());
                
                bos.write("</Customer>".getBytes());
                bos.write("<TestTime>".getBytes());
                bos.write(date.getBytes());
                bos.write("</TestTime>".getBytes());
                bos.write("<TestInfo>".getBytes());
                for(int i=0;i<items.length;i++){
                   bos.write("<TestItem Key=".getBytes());
                   bos.write(("\""+items[i]+"\"").getBytes());
                   bos.write(">".getBytes());
                    for(int k=0;k<nL.getLength();k++){
                        if(nL.item(k).getAttributes().item(0).getNodeValue().equals(items[i])){
                            //System.out.println(nL.item(k).getTextContent());
                            System.out.println(nL.item(k).getAttributes().item(0).getNodeValue()+"===========");
                            bos.write(nL.item(k).getTextContent().getBytes());
                        } 
                     }
                   bos.write("</TestItem>".getBytes());  
                }
                bos.write("</TestInfo>".getBytes());
                bos.write("<NgInfo>".getBytes());
                bos.write("<Errcode>".getBytes());
                bos.write(err[0].getBytes());
                bos.write("</Errcode>".getBytes());
                bos.write("<Pin>".getBytes());
                bos.write(err[1].getBytes());
                bos.write("</Pin>".getBytes());
                bos.write("<Location>".getBytes());
                
                bos.write("</Location>".getBytes());
                bos.write("</NgInfo>".getBytes());
                bos.write("</root>".getBytes());
                bos.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }    
        }
    }

    private void AddDataForTable(String path) {
         ReadXmlFile readXmlFile=new ReadXmlFile(path);
        try {
            List list_id=readXmlFile.XmlToList_key(path);
            List list_casename=readXmlFile.XmlToList_casename(path);
            DefaultTableModel tableModel = null;
            
             tableModel=new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row,int column){
                    if(column==0)
                        return true;
                    else
                        return false; 
            }
            
        };
        tableModel.setColumnIdentifiers(new String[]{"选择", "关键字名称", "关键字值"});

        int list_size=list_id.size();
        
        tableModel.getDataVector().clear();
        item=set.getNum().toString();
        items = item.split(",");
       
        int flag=0;
        for(int i=0;i<list_size;i++){  
                String id=null;
                String name=null;
               id=(String) list_id.get(i);
               name=(String)list_casename.get(i);
//               System.out.println(name+"1111111111111");
//               for(int q=1;q<items.length;q++)
//                    System.out.println(items[q]+"00000000010");
           for(int q=0;q<items.length;q++){ 
               if(items[q].equals(id)){        
                   // System.out.println(items[q]+"00000000000");
                   tableModel.addRow(new Object[]{new Boolean(true),id,name});
                   flag=1;
                   break;
               }
            }   
              if(flag==0){
                  tableModel.addRow(new Object[]{new Boolean(false),id,name});
               }
               flag=0;
          } 
        
        jTable1=new JTable(tableModel){
              Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        
        };
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
            
        } catch (Exception ex) {
            Logger.getLogger(TestJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void AddNullForTable() {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(true), null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "选择", "关键字名称", "关键字值"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
    }

    private void UploadXml(String path) throws FileNotFoundException, IOException, ParserConfigurationException, SAXException {
        String str=null;  
        File f=new File(path);
        FileInputStream fis=new FileInputStream(f);
        byte[]bs=new byte[1024];
        int count=0;
        while((count=fis.read(bs))>0){
            str=new String(bs,0,count);
        }
          
         OutputStreamWriter out=null;
         BufferedReader in=null;
         StringBuilder result=new StringBuilder();
         String url="http://"+server+"/MES.WIP.Webservice/FTService.asmx/MBTestXml";
         URL realUrl=new URL(url);
         HttpURLConnection conn= (HttpURLConnection) realUrl.openConnection();
         conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
      //   conn.setRequestProperty("Content-Length",str.length());
         conn.setDoOutput(true);
         conn.setDoInput(true);
         conn.setRequestMethod("POST");
         out=new OutputStreamWriter(conn.getOutputStream(),"UTF-8");
         
         //正文，内容跟get的url中？后面的参数字符一致
         out.write("sXML="+str);
         out.flush();
         
          conn.connect();
          in=new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
          String line;
          
          while((line=in.readLine())!=null){
              result.append(line);
          }
          System.out.println(result);
//          System.out.println(conn.getResponseMessage());
  
//            DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
//            DocumentBuilder builder=factory.newDocumentBuilder();
//            Document doc=builder.parse(line);
//            String stv=doc.getDocumentElement().getFirstChild().getNodeValue();
          jLabelUpload.setText("");
          
 //         if(stv.equals("")){
              
            //  jLabelUpload.setText(bar+" Transfer OK!");
              jLabelUpload.setText(result.toString());
              jLabelUpload.setForeground(Color.green);
              jLabelUpload.setFont(new Font("",1,14));
//          }else{
//            //  jLabelUpload.setText(bar+" Transfer FAIL!");
//              jLabelUpload.setText(result.toString());
//              jLabelUpload.setForeground(Color.red);
//              jLabelUpload.setFont(new Font("",1,20));
//          }
          
          conn.disconnect();
          out.close();
          in.close();
    }
}
